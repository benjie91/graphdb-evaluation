CREATE QUERY ArrayAccumElem() FOR GRAPH minimalNet {
  	
	ArrayAccum<SumAccum<DOUBLE>> @@aaSumD[2][2];  # 2D Sum Double
	ArrayAccum<SumAccum<STRING>> @@aaSumS[2][2];  # 2D Sum String
	ArrayAccum<MaxAccum<INT>> @@aaMax[2];
	ArrayAccum<MinAccum<UINT>> @@aaMin[2];
	ArrayAccum<AvgAccum> @@aaAvg[2];
	ArrayAccum<AndAccum<BOOL>> @@aaAnd[2];
	ArrayAccum<OrAccum<BOOL>> @@aaOr[2];
	ArrayAccum<BitwiseAndAccum> @@aaBitAnd[2];
	ArrayAccum<BitwiseOrAccum> @@aaBitOr[2];
	ArrayAccum<ListAccum<INT>> @@aaList[2][2];    # 2D List
	ArrayAccum<SetAccum<FLOAT>> @@aaSetF[2];
	ArrayAccum<BagAccum<DATETIME>> @@aaBagT[2];
	
	## for test data	
	ListAccum<STRING> @@words;
	BOOL toggle = false;
	@@words += "1st"; @@words += "2nd"; @@words += "3rd"; @@words += "4th";

	# Int:  a[0] += 1, 2;   a[1] += 3, 4
	# Bool: alternate true/false
	# Float: a[0] += 1.111, 2.222;  a[1] += 3.333, 4.444
	# 2D Doub: a[0][0] += 1.111, 2.222;   a[0][1] += 5.555, 6.666;
	#          a[1][0] += 3.333, 4.444;   a[0][1] += 7.777, 8.888;
	
	FOREACH i IN RANGE [0,1] DO
		FOREACH n IN RANGE [1, 2] DO
			toggle = NOT toggle;
			@@aaMax[i] += i*2 + n;
			@@aaMin[i] += i*2 + n;
			@@aaAvg[i] += i*2 + n;
			@@aaAnd[i] += toggle;
			@@aaOr[i] += toggle;
			@@aaBitAnd[i] += i*2 + n;
			@@aaBitOr[i] += i*2 + n;
			@@aaSetF[i] += (i*2 + n)/0.9;
			@@aaBagT[i] += epoch_to_datetime(i*2 + n);

			FOREACH j IN RANGE [0,1] DO
				@@aaSumD[i][j] += (j*4 + i*2 + n)/0.9;
				@@aaSumS[i][j] += @@words.get((j*2 + i + n)%4);
				@@aaList[i][j] += j*4 +i*2 + n ;
			END;
		END;
	END;
				
	PRINT @@aaSumD;		PRINT @@aaSumS;
	PRINT @@aaMax;		PRINT @@aaMin;		PRINT @@aaAvg;
	PRINT @@aaAnd;		PRINT @@aaOr;
	PRINT @@aaBitAnd;	PRINT @@aaBitOr;
	PRINT @@aaList;		PRINT @@aaSetF;		PRINT @@aaBagT;
}
